{"version":3,"sources":["webpack:///../docs/api/01-brookjs.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,4BAAW,0BAAYC,WAAW,KAAvB,UAAX,2DAAyH,0BAAYA,WAAW,KAAvB,WAAzH,0GAAuR,0BAAYA,WAAW,KAAvB,oBAAvR,2CAA+X,0BAAYA,WAAW,KAAvB,mBAA/X,8FAAyhB,mBAAGA,WAAW,KAAQ,CAC3iB,KAAQ,oDAD6gB,wBAAzhB,KAGA,iBAAQ,CACN,GAAM,OADR,OAGA,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,OAFH,MAE0D,0BAAYA,WAAW,MAAvB,SAC1D,4BAAW,0BAAYA,WAAW,KAAvB,QAAX,mBAA+E,0BAAYA,WAAW,KAAvB,aAA/E,SAA8I,0BAAYA,WAAW,KAAvB,yBAA9I,gFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oGASL,iBAAQ,CACN,GAAM,kBADR,kBAGA,gIAA+G,0BAAYA,WAAW,KAAvB,WAA/G,KACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,eAFH,eAGA,qBAAG,0BAAYA,WAAW,KAAvB,eAAH,mIAA8L,0BAAYA,WAAW,KAAvB,QAA9L,sDAAqS,0BAAYA,WAAW,KAAvB,QAArS,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8RAiBL,oFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8MAaL,iIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oMAWL,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,uCACA,kBAAIA,WAAW,MAAf,wCAEF,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,+BAAoD,0BAAYA,WAAW,MAAvB,QAApD,6CAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYA,WAAW,KAAvB,gBAAH,sFACA,mHAAkG,0BAAYA,WAAW,KAAvB,YAAlG,QAA+J,0BAAYA,WAAW,KAAvB,UAA/J,eAAiO,0BAAYA,WAAW,KAAvB,oBAAjO,eAA6S,0BAAYA,WAAW,KAAvB,YAA7S,6EAA+a,0BAAYA,WAAW,KAAvB,UAA/a,4HAA8lB,0BAAYA,WAAW,KAAvB,UAA9lB,oDACA,sCAAqB,0BAAYA,WAAW,KAAvB,UAArB,SAAiF,0BAAYA,WAAW,KAAvB,kBAAjF,sGAAkP,0BAAYA,WAAW,KAAvB,UAAlP,2CAAgV,0BAAYA,WAAW,KAAvB,WAAhV,wGACA,iBAAQ,CACN,GAAM,WADR,WAGA,mCAAkB,0BAAYA,WAAW,KAAvB,WAAlB,YACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kdAoBL,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0XAiBL,0EAAyD,0BAAYA,WAAW,KAAvB,aAAzD,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8d,gMAwBTJ,EAAWK,gBAAiB","file":"component---docs-api-01-brookjs-mdx-a430adc83c248a393d59.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesdigioia/Code/brookjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"brookjs\"\n    }}>{`brookjs`}</h1>\n    <h2 {...{\n      \"id\": \"action-module\"\n    }}>{`action module`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` module provides the action constants and creators that `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` uses internally. These can be used to interact with any of the streams exported by the framework. The `}<inlineCode parentName=\"p\">{`UPPER_SNAKE_CASE`}</inlineCode>{` strings are the action type, while the `}<inlineCode parentName=\"p\">{`camelCaseAction`}</inlineCode>{` functions are the action creators. All actions generated by the framework comply with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/acdlite/flux-standard-action\"\n      }}>{`Flux Standard Action`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"api\"\n    }}>{`Api`}</h3>\n    <h4 {...{\n      \"id\": \"raf--raf\"\n    }}><inlineCode parentName=\"h4\">{`RAF`}</inlineCode>{` & `}<inlineCode parentName=\"h4\">{`raf$`}</inlineCode></h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`raf$`}</inlineCode>{` stream emits a `}<inlineCode parentName=\"p\">{`RafAction`}</inlineCode>{` on a `}<inlineCode parentName=\"p\">{`requestAnimationFrame`}</inlineCode>{` tick. This will schedule renders in sync with the framework rendering flow.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-flow\"\n      }}>{`type RafAction = {\n  type: typeof RAF,\n  payload: {\n    time: DOMHighResTimeStamp\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"helpers-module\"\n    }}>{`helpers module`}</h2>\n    <p>{`The helpers module isn't a separate module but a collection of functions to assist with common tasks in `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"mapactionto-function\"\n    }}><inlineCode parentName=\"h3\">{`mapActionTo`}</inlineCode>{` {Function}`}</h3>\n    <p><inlineCode parentName=\"p\">{`mapActionTo`}</inlineCode>{` is a simple function designed to simplify the process of mapping child events to its parent's events. It modifies the action's `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` and maintains the previous source in the Action's `}<inlineCode parentName=\"p\">{`meta`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { mapActionTo } from 'brookjs';\n\nconst child = {\n  type: 'CHILD',\n  payload: { value: true }\n};\n\nconst parent = mapActionTo('CHILD', 'PARENT', child);\n\nassert.deepEqual(parent, {\n  type: 'PARENT',\n  payload: { value: true },\n  meta: { sources: ['CHILD'] }\n});\n`}</code></pre>\n    <p>{`If the source action doesn't match, the action is returned:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { mapActionTo } from 'brookjs';\n\nconst child = {\n  type: 'OTHER_CHILD',\n  payload: { value: true }\n};\n\nconst parent = mapActionTo('CHILD', 'PARENT', child);\n\nassert(parent === child);\n`}</code></pre>\n    <p>{`This function is curried, so it can be used to map child events to their parent's actions using preplug:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default component({\n  children: children({\n    child: {\n      factory: ChildComponent,\n      preplug: instance$ => instance$.map(mapActionTo('CHILD', 'PARENT'))\n    }\n  })\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`{string} source - Action type to modify.`}</li>\n      <li parentName=\"ul\">{`{string} dest - Action type to map.`}</li>\n      <li parentName=\"ul\">{`{Action} action - Action to modify.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`{Action} Modified action if `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` matches, original action if it doesn't.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"observedelta\"\n    }}>{`observeDelta`}</h2>\n    <p><inlineCode parentName=\"p\">{`observeDelta`}</inlineCode>{` is a Redux middleware for binding a set of delta source streams to a Redux store.`}</p>\n    <p>{`When the middleware gets applied, each source function will be called with two parameters: `}<inlineCode parentName=\"p\">{`actions$`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`state$`}</inlineCode>{`. These are `}<inlineCode parentName=\"p\">{`Kefir.Observable`}</inlineCode>{`s, with the `}<inlineCode parentName=\"p\">{`actions$`}</inlineCode>{` stream emitting every action dispatched through the application, and the `}<inlineCode parentName=\"p\">{`state$`}</inlineCode>{` emitting each new state after each action. Each source function should return a Kefir stream, which are combined into a `}<inlineCode parentName=\"p\">{`delta$`}</inlineCode>{` stream that emits actions into the Redux store.`}</p>\n    <p>{`Specifically, `}<inlineCode parentName=\"p\">{`state$`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`Kefir.Property`}</inlineCode>{`, which means it retains its current value when it gets subscribed to. Additionally, note that the `}<inlineCode parentName=\"p\">{`state$`}</inlineCode>{` will have its value emitted before the `}<inlineCode parentName=\"p\">{`action$`}</inlineCode>{`, ensuring that any combination of the stream will have the latest state when the action is emitted.`}</p>\n    <h1 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h1>\n    <p>{`An example `}<inlineCode parentName=\"p\">{`source$`}</inlineCode>{` stream:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Kefir } from 'brookjs';\n\nexport default function exampleSourceStream(actions$, state$) {\n  const save$ = actions$.filter(action => action.type === 'SAVE_THING');\n\n  return save$.flatMap(action => {\n    const request = fetch('/api/url', {\n      type: 'POST',\n      body: JSON.stringify(action.payload)\n    });\n\n    return Kefir.fromPromise(request).map(response => ({\n      type: 'THING_SAVED',\n      payload: response\n    }));\n  });\n}\n`}</code></pre>\n    <p>{`Applying the middleware with the example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { applyMiddleware, createStore } from 'redux';\nimport { observeDelta } from 'brookjs';\nimport reducer from './reducer';\nimport exampleSourceStream from './example';\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(observeDelta(exampleSourceStream))\n);\n\nstore.dispatch({\n  type: 'SAVE_THING',\n  payload: { id: 1, name: 'The Thing to save' }\n});\n`}</code></pre>\n    <p>{`If you need to get the state on every action, use `}<inlineCode parentName=\"p\">{`sampledBy`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { ofType, Kefir } from 'brookjs';\n\nexport default function exampleSourceStream(actions$, state$) {\n  const save$ = actions$.thru(ofType(SAVE_USER_BUTTON_CLICK));\n\n  return state$.sampledBy(save$).flatMap(state => {\n    const request = fetch('/api/user', {\n      type: 'POST',\n      body: JSON.stringify(state.user)\n    });\n\n    return Kefir.fromPromise(request).map(response => ({\n      type: 'USER_SAVED',\n      payload: response\n    }));\n  });\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
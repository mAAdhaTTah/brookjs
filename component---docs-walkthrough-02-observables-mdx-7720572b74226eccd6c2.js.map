{"version":3,"sources":["webpack:///../docs/walkthrough/02-observables.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,yBAGA,qDAAoC,0BAAYC,WAAW,KAAvB,WAApC,8DAAsJ,0BAAYA,WAAW,KAAvB,WAAtJ,oBAA8N,mBAAGA,WAAW,KAAQ,CAChP,KAAQ,qCADkN,WAA9N,sEAGA,sBACE,kBAAIA,WAAW,MAAf,8BACA,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,wBAEF,kMACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,qQACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iFAIL,qBAAG,kBAAIA,WAAW,KAAf,0CAA8D,0BAAYA,WAAW,MAAvB,KAA9D,mEACH,uCAAsB,0BAAYA,WAAW,KAAvB,SAAtB,qBAA6F,0BAAYA,WAAW,KAAvB,SAA7F,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6FAKL,2GAA0F,0BAAYA,WAAW,KAAvB,UAA1F,yFACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,sCAEL,2GAA0F,0BAAYA,WAAW,KAAvB,KAA1F,sDACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,mJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6HAKL,qLACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gIAIL,8EAA6D,0BAAYA,WAAW,KAAvB,UAA7D,mCAAmJ,0BAAYA,WAAW,KAAvB,WAAnJ,gBACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,6LAA4K,0BAAYA,WAAW,KAAvB,WAA5K,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sJAQL,+DAA8C,0BAAYA,WAAW,KAAvB,QAA9C,mIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kMAUL,iCAAgB,0BAAYA,WAAW,KAAvB,SAAhB,6MACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+PAUL,2BAAU,0BAAYA,WAAW,KAAvB,WAAV,6QAA2U,0BAAYA,WAAW,KAAvB,WAA3U,mBACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,iNACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,kEAGpB,kBAAIA,WAAW,MACX,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mEADQ,mBAIxB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iCADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,iFAItB,wE,4MAKJJ,EAAWK,gBAAiB","file":"component---docs-walkthrough-02-observables-mdx-7720572b74226eccd6c2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesdigioia/Code/brookjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"what-are-observables\"\n    }}>{`What are Observables?`}</h1>\n    <p>{`Before we start getting into `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{`, let's take a short detour to talk about Observables. For `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{`, we'll be using `}<a parentName=\"p\" {...{\n        \"href\": \"https://kefirjs.github.io/kefir/\"\n      }}>{`Kefirjs`}</a>{`, which has a few properties that make it a good choice over RxJS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Hot observables by default`}</li>\n      <li parentName=\"ol\">{`Comparable performance`}</li>\n      <li parentName=\"ol\">{`Thrown errors crash`}</li>\n      <li parentName=\"ol\">{`Smaller API surface`}</li>\n    </ol>\n    <p>{`If you're new to Observables, the 4th bullet is probably the most important. This makes Kefir easier to learn & use, as there are fewer methods to wrap your head around.`}</p>\n    <h2 {...{\n      \"id\": \"array-over-time\"\n    }}>{`Array Over Time`}</h2>\n    <p>{`The best way to describe Observables is as an array whose values arrive over time. Instead of them being available in the array at the time you subscribe to the Observable, those values are pushed into the Observable by the data source.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const input$ = Kefir.fromEvents(document.querySelector('input'), 'input');\n`}</code></pre>\n    <p><em parentName=\"p\">{`Note: Suffixing the variable name with `}<inlineCode parentName=\"em\">{`$`}</inlineCode>{` for Observables is a common convention but not a requirement.`}</em></p>\n    <p>{`Every time the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` event fires, the `}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` object is pushed into the stream. We can now manipulate the stream similar to an array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Map the event to its current value\nconst value$ = input$.map(e => e.target.value);\n`}</code></pre>\n    <p>{`Now, every time the value changes, it's pushed as a new value into the stream, and `}<inlineCode parentName=\"p\">{`value$`}</inlineCode>{` always has the latest value from the input. We can model this with a Marble Diagram:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`|a---b----c----d---e-f-gh----i|\n`}</code></pre>\n    <p>{`Letters are used to represent the different values emitted by the stream, with the `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{` representing the passage of a set amount of time.`}</p>\n    <h2 {...{\n      \"id\": \"combining-observables\"\n    }}>{`Combining Observables`}</h2>\n    <p>{`This may not seem that interesting, but what if we only wanted to get the value of the input whenever a button is clicked?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const click$ = Kefir.fromEvents(document.querySelector('button'), 'click');\nconst submit$ = input$.sampledBy(click$);\n`}</code></pre>\n    <p>{`In a few lines of code, we combine the two Observables so that the relationship between them is explicit. We can model this stream with this marble diagram:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`input$  |a---b----c----d---e-f-gh----i|\nclick$  |-----------.-------------.---|\nsubmit$ |-----------c-------------h---|\n`}</code></pre>\n    <p>{`Every time the button is clicked, the last value from `}<inlineCode parentName=\"p\">{`input$`}</inlineCode>{` Observable is emitted from the `}<inlineCode parentName=\"p\">{`submit$`}</inlineCode>{` Observable.`}</p>\n    <h2 {...{\n      \"id\": \"handling-side-effects\"\n    }}>{`Handling Side Effects`}</h2>\n    <p>{`Now that we've got the latest value at the point it's been submitted, we need to run the search against the API. We can plug Observables into other Observables with `}<inlineCode parentName=\"p\">{`flatMap`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const results$ = submit$.flatMap(term =>\n  ajax$(\\`/api/search?s=\\${term}\\`)\n    .flatMap(res => res.json())\n    .map(body => body.results)\n);\n`}</code></pre>\n    <p>{`There's one issue with this though: If `}<inlineCode parentName=\"p\">{`term`}</inlineCode>{` is an empty string, it will still hit the API, which will result in an error. To fix this, we can filter out any empty values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const results$ = submit$\n  .filter(term => term !== '')\n  .flatMap(term =>\n    ajax$(\\`/api/search?s=\\${term}\\`)\n      .flatMap(res => res.json())\n      .map(body => body.results)\n  );\n`}</code></pre>\n    <p>{`Assuming `}<inlineCode parentName=\"p\">{`ajax$`}</inlineCode>{` is an Observable-based AJAX library, this searches the API with the current term entered in the input field. We can use the output of this stream to render the search results and output it to the DOM.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const resultsHTML$ = results$\n  .map(results => results.map(result => \\`<li>\\${result.name}</li>\\`))\n  .flatMapErrors(error => Kefir.constant(\\`<li>Error: \\${error.message}</li>\\`));\n\nresultsHTML$.observe(html => {\n  resultsUl.innerHTML = html;\n});\n`}</code></pre>\n    <p>{`In `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{`, React is responsible for managing the DOM, and we put our side effects in a delta, which we'll learn about later, but it's this relationship between things happening in various parts of the system that Observables are able to express. We take advantage of this in `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{`' architecture.`}</p>\n    <h2 {...{\n      \"id\": \"further-resources\"\n    }}>{`Further Resources`}</h2>\n    <p>{`This is a pretty quick introduction what Observables are and their benefits. If you want to explore this in more depth, below are some online resources that go into this in more depth.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kefirjs.github.io/kefir/\"\n        }}>{`Kefir docs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\"\n        }}>{`The introduction to Reactive Programming you've been missing\n`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://egghead.io/series/introduction-to-reactive-programming\"\n            }}>{`Video series`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://reactivex.io/learnrx/\"\n        }}>{`ReactiveX`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=FAZJsxcykPs\"\n        }}>{`Video: Netflix JavaScript Talks - Async JavaScript with Reactive Extensions`}</a></li>\n    </ul>\n    <p>{`If you're interested in expanding this list or`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
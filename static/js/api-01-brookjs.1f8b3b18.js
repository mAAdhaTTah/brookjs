(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./docs/api/01-brookjs.mdx":function(e,a,n){"use strict";n.r(a);var t=n("./node_modules/react/index.js"),o=n.n(t),m=n("./node_modules/@mdx-js/tag/dist/index.js");a.default=function(e){var a=e.components;return o.a.createElement(m.MDXTag,{name:"wrapper",components:a},o.a.createElement(m.MDXTag,{name:"h1",components:a,props:{id:"brookjs"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#brookjs"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"brookjs"),o.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"action-module"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#action-module"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"action module"),o.a.createElement(m.MDXTag,{name:"p",components:a},"The ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"action")," module provides the action constants and creators that ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"brookjs")," uses internally. These can be used to interact with any of the streams exported by the framework. The ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"UPPER_SNAKE_CASE")," strings are the action type, while the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"camelCaseAction")," functions are the action creators. All actions generated by the framework comply with the ",o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/acdlite/flux-standard-action"}},"Flux Standard Action"),"."),o.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"api"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h3",props:{"aria-hidden":!0,href:"#api"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Api"),o.a.createElement(m.MDXTag,{name:"h4",components:a,props:{id:"raf--raf"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h4",props:{"aria-hidden":!0,href:"#raf--raf"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"h4"},"RAF")," & ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"h4"},"raf$")),o.a.createElement(m.MDXTag,{name:"p",components:a},"The ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"raf$")," stream emits a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"RafAction")," on a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"requestAnimationFrame")," tick. This will schedule renders in sync with the framework rendering flow."),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-flow"}},"type RafAction = {\n    type: typeof RAF;\n    payload: {\n        time: DOMHighResTimeStamp;\n    };\n}\n")),o.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"combineactionreducers"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#combineactionreducers"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"combineActionReducers"),o.a.createElement(m.MDXTag,{name:"p",components:a},o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"combineActionReducers")," is a function that takes an array of tuples and a default state, and returns a Redux reducer function. The reducer tuples should be array with a string, which the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"action.type")," is matched against, and a reducer function, that takes a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state")," and the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"action")," and returns a new state."),o.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"parameters"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#parameters"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Parameters"),o.a.createElement(m.MDXTag,{name:"ul",components:a},o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"p",components:a,parentName:"li"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"{Array<ReducerTuple>} cond")," - An array of ReducerTuples, where"),o.a.createElement(m.MDXTag,{name:"ul",components:a,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"type ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"ReducerTuple = [ActionType, ReducerFunction]")))),o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"{any} defaults")," - Default state to return when no type matches.")),o.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"helpers-module"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#helpers-module"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"helpers module"),o.a.createElement(m.MDXTag,{name:"p",components:a},"The helpers module isn't a separate module but a collection of functions to assist with common tasks in ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"brookjs"),"."),o.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"mapactionto-function"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h3",props:{"aria-hidden":!0,href:"#mapactionto-function"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"h3"},"mapActionTo")," {Function}"),o.a.createElement(m.MDXTag,{name:"p",components:a},o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"mapActionTo")," is a simple function designed to simplify the process of mapping child events to its parent's events. It modifies the action's ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"type")," and maintains the previous source in the Action's ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"meta"),"."),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"import { mapActionTo } from 'brookjs';\n\nconst child = {\n    type: 'CHILD',\n    payload: { value: true }\n};\n\nconst parent = mapActionTo('CHILD', 'PARENT', child);\n\nassert.deepEqual(parent, {\n    type: 'PARENT',\n    payload: { value: true },\n    meta: { sources: ['CHILD'] }\n});\n")),o.a.createElement(m.MDXTag,{name:"p",components:a},"If the source action doesn't match, the action is returned:"),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"import { mapActionTo } from 'brookjs';\n\nconst child = {\n    type: 'OTHER_CHILD',\n    payload: { value: true }\n};\n\nconst parent = mapActionTo('CHILD', 'PARENT', child);\n\nassert(parent === child);\n")),o.a.createElement(m.MDXTag,{name:"p",components:a},"This function is curried, so it can be used to map child events to their parent's actions using preplug:"),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"export default component({\n    children: children({\n        child: {\n          factory: ChildComponent,\n          preplug: instance$ => instance$.map(mapActionTo('CHILD', 'PARENT'))\n        }\n    })\n});\n")),o.a.createElement(m.MDXTag,{name:"h4",components:a,props:{id:"parameters-1"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h4",props:{"aria-hidden":!0,href:"#parameters-1"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Parameters"),o.a.createElement(m.MDXTag,{name:"ul",components:a},o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"{string} source - Action type to modify."),o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"{string} dest - Action type to map."),o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"{Action} action - Action to modify.")),o.a.createElement(m.MDXTag,{name:"h4",components:a,props:{id:"returns"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h4",props:{"aria-hidden":!0,href:"#returns"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Returns"),o.a.createElement(m.MDXTag,{name:"ul",components:a},o.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"{Action} Modified action if ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"type")," matches, original action if it doesn't.")),o.a.createElement(m.MDXTag,{name:"h2",components:a,props:{id:"observedelta"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#observedelta"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"observeDelta"),o.a.createElement(m.MDXTag,{name:"p",components:a},o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"observeDelta")," is a Redux middleware for binding a set of delta source streams to a Redux store."),o.a.createElement(m.MDXTag,{name:"p",components:a},"When the middleware gets applied, each source function will be called with two parameters: ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"actions$")," and ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state$"),". These are ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Kefir.Observable"),"s, with the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"actions$")," stream emitting every action dispatched through the application, and the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state$")," emitting each new state after each action. Each source function should return a Kefir stream, which are combined into a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"delta$")," stream that emits actions into the Redux store."),o.a.createElement(m.MDXTag,{name:"p",components:a},"Specifically, ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state$")," is a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Kefir.Property"),", which means it retains its current value when it gets subscribed to. Additionally, note that the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state$")," will have its value emitted before the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"action$"),", ensuring that any combination of the stream will have the latest state when the action is emitted."),o.a.createElement(m.MDXTag,{name:"h1",components:a,props:{id:"example"}},o.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#example"}},o.a.createElement(m.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Example"),o.a.createElement(m.MDXTag,{name:"p",components:a},"An example ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"source$")," stream:"),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"import { Kefir } from 'brookjs';\n\nexport default function exampleSourceStream(actions$, state$) {\n    const save$ = actions$.filter(action => action.type === 'SAVE_THING');\n\n    return save$.flatMap(action => {\n        const request = fetch('/api/url', {\n            type: 'POST',\n            body: JSON.stringify(action.payload)\n        });\n\n        return Kefir.fromPromise(request)\n            .map(response => ({\n                type: 'THING_SAVED',\n                payload: response\n            }));\n    });\n}\n")),o.a.createElement(m.MDXTag,{name:"p",components:a},"Applying the middleware with the example:"),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"import { applyMiddleware, createStore } from 'redux';\nimport { observeDelta } from 'brookjs'\nimport reducer from './reducer';\nimport exampleSourceStream from './example'\n\nconst store = createStore(reducer, applyMiddleware(observeDelta(exampleSourceStream)));\n\nstore.dispatch({ type: 'SAVE_THING', payload: { id: 1, name: 'The Thing to save' } });\n")),o.a.createElement(m.MDXTag,{name:"p",components:a},"If you need to get the state on every action, use ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"sampledBy"),":"),o.a.createElement(m.MDXTag,{name:"pre",components:a},o.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"import { ofType, Kefir } from 'brookjs';\n\nexport default function exampleSourceStream(actions$, state$) {\n    const save$ = actions$.thru(ofType(SAVE_USER_BUTTON_CLICK));\n\n    return state$.sampledBy(save$).flatMap(state => {\n        const request = fetch('/api/user', {\n            type: 'POST',\n            body: JSON.stringify(state.user)\n        });\n\n        return Kefir.fromPromise(request)\n            .map(response => ({\n                type: 'USER_SAVED',\n                payload: response\n            }));\n    });\n}\n")))}}}]);
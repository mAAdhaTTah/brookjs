{"version":3,"sources":["webpack:///../docs/01-index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,YADR,YAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kBADQ,wBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sBADQ,wBAItB,iBAAQ,CACN,GAAM,eADR,gBAGA,qBAAG,0BAAYA,WAAW,KAAvB,WAAH,0IACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,qBAAG,0BAAYA,WAAW,KAAvB,WAAH,oYACA,+TACA,0NAAyM,kBAAIA,WAAW,KAAf,QAAzM,sDACA,iBAAQ,CACN,GAAM,YADR,YAGA,+WACA,oOACA,iZACA,iBAAQ,CACN,GAAM,4BADR,4BAGA,wYACA,kCAAiB,0BAAYA,WAAW,KAAvB,WAAjB,yRACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yBADQ,SAApB,IAEuB,mBAAGA,WAAW,MAAS,CAC1C,KAAQ,0BADW,UAGvB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0BADQ,aAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,UAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,qBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yBADQ,QAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uDADQ,kCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kEADQ,gBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uDADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,UAItB,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oCADQ,a,0LAQ1BJ,EAAWK,gBAAiB","file":"component---docs-01-index-mdx-edf049a0b55d18e80269.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jdigioia/Code/JavaScript/brookjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"brookjs\"\n    }}>{`brookjs`}</h1>\n    <h2 {...{\n      \"id\": \"download\"\n    }}>{`Download`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"dist/brook.js\"\n        }}>{`Development Version`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"dist/brook.min.js\"\n        }}>{`Production Version`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"why-brookjs\"\n    }}>{`Why brookjs?`}</h2>\n    <p><inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` combines React/Redux with reactive programming tools to enable well-structured, testable applications that are performant by default.`}</p>\n    <h3 {...{\n      \"id\": \"well-structured\"\n    }}>{`Well-Structured`}</h3>\n    <p><inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` enables you to express changes in your components as streams. Props can be provided to a component as a stream and mapped to the specific changes in the DOM they're supposed to make (Input). DOM events can be mapped to the specific events they're supposed to dispatch into Redux (Output). Thus, components become solely an expression of I/O, maintaining no internal state by default.`}</p>\n    <p>{`The entire application is modeled this way, which makes where particular pieces of logic belong obvious, as it's intentionally designed to be difficult to put those pieces of logic elsewhere. Using observables to express this logic makes it easy to handle asynchronous, event-driven JavaScript.`}</p>\n    <p>{`With side effects pushed into a corner, all application logic is defined in the Redux store. Reducers can express the state of the application as a result of this action as well as what happens `}<em parentName=\"p\">{`next`}</em>{`, keeping side effects decoupled from one another.`}</p>\n    <h3 {...{\n      \"id\": \"testable\"\n    }}>{`Testable`}</h3>\n    <p>{`With your components acting as I/O, testing them requires passing in state and ensuring the correct DOM is emitted, and triggering DOM events against them and ensuring the correct events are emitted. All side effects in your application can be tested like this, ensuring the communication channels out of the application function as expected.`}</p>\n    <p>{`Your application logic is expressed in your reducers, which are all pure functions. This makes them easy to test, checking that a state & action combination produces the expected new state & next action.`}</p>\n    <p>{`Integration testing can be handled by replacing I/O with a matching mock I/O, controlling what events are emitted in response to what commands. You can drive your application at every level, from small unit tests handling detailed logic, integration tests ensuring a particular piece of the application runs as expected, all the way up to full end-to-end tests in the browser.`}</p>\n    <h3 {...{\n      \"id\": \"automatically-performant\"\n    }}>{`Automatically Performant`}</h3>\n    <p>{`With DOM changes expressed as observables, the resulting change would actually trigger unless the observable emits a new value. This allows changes to be controlled at the very edge of the system and filter out any values that match the previous values, avoiding rerenders. Combined with memoized selectors, a basic strict equality check becomes all that's necessary.`}</p>\n    <p>{`In loops, `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` requires a structure designed for performance, enabling React to rearrange components with shared keys while the children receive the same stream each time. This keeps children from needing to rebind to new streams on every render and avoids costly loops to search for values.`}</p>\n    <h2 {...{\n      \"id\": \"influences\"\n    }}>{`Influences`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/\"\n        }}>{`React`}</a>{`/`}<a parentName=\"li\" {...{\n          \"href\": \"https://redux.js.org/\"\n        }}>{`Redux`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cycle.js.org/\"\n        }}>{`Cycle.js`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/calmm-js/karet/\"\n        }}>{`Karet`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://redux-observable.js.org/\"\n        }}>{`redux-observable`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://elm-lang.org/\"\n        }}>{`elm`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://alistair.cockburn.us/Hexagonal+architecture\"\n        }}>{`Ports & Adapters Architecture`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://berb.github.io/diploma-thesis/original/054_actors.html\"\n        }}>{`Actor Model`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://martinfowler.com/eaaDev/EventSourcing.html\"\n        }}>{`Event sourcing`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://martinfowler.com/bliki/CQRS.html\"\n        }}>{`CQRS`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"community\"\n    }}>{`Community`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://gitter.im/brookjs/Lobby\"\n        }}>{`Gitter`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
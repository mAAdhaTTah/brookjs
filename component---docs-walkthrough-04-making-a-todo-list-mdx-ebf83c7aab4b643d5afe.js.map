{"version":3,"sources":["webpack:///../docs/walkthrough/04-making-a-todo-list.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,iEAAgD,0BAAYC,WAAW,KAAvB,WAAhD,sKACA,iBAAQ,CACN,GAAM,4BADR,UAEc,0BAAYA,WAAW,MAAvB,WAFd,cAGA,sDAAqC,0BAAYA,WAAW,KAAvB,WAArC,mCAA4H,0BAAYA,WAAW,KAAvB,UAA5H,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6uCAuDL,sHACA,iBAAQ,CACN,GAAM,wBADR,UAEc,0BAAYA,WAAW,MAAvB,OAFd,cAGA,6FAA4E,0BAAYA,WAAW,KAAvB,OAA5E,iCAA6J,0BAAYA,WAAW,KAAvB,WAA7J,oCACA,gHAA+F,0BAAYA,WAAW,KAAvB,YAA/F,mSACA,wDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4OAgBL,yGACA,iBAAQ,CACN,GAAM,2BADR,cAEkB,0BAAYA,WAAW,MAAvB,OAFlB,aAGA,wVACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0qBAyBL,oDAAmC,0BAAYA,WAAW,KAAvB,eAAnC,gBAA2G,0BAAYA,WAAW,KAAvB,WAA3G,0DACA,sBACE,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,cACjC,kBAAIA,WAAW,MAAf,+BAEF,uHAAsG,0BAAYA,WAAW,KAAvB,eAAtG,2EAAyO,0BAAYA,WAAW,KAAvB,OAAzO,8IAAua,0BAAYA,WAAW,KAAvB,eAAva,mBACA,4CAA2B,0BAAYA,WAAW,KAAvB,QAA3B,8DAA0I,0BAAYA,WAAW,KAAvB,aAA1I,0GACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,gKAA+I,0BAAYA,WAAW,KAAvB,YAA/I,8EACA,2CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ueAyBL,uDAAsC,0BAAYA,WAAW,KAAvB,iBAAtC,YAA4G,0BAAYA,WAAW,KAAvB,eAA5G,mBAAuL,0BAAYA,WAAW,KAAvB,mBAAvL,SAA4P,0BAAYA,WAAW,KAAvB,WAA5P,sGAAsZ,0BAAYA,WAAW,KAAvB,mBAAtZ,0BAA4e,0BAAYA,WAAW,KAAvB,SAA5e,oBAAkjB,0BAAYA,WAAW,KAAvB,OAAljB,qEACA,qBAAG,sBAAQA,WAAW,KAAnB,iC,mNAKPJ,EAAWK,gBAAiB","file":"component---docs-walkthrough-04-making-a-todo-list-mdx-ebf83c7aab4b643d5afe.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesdigioia/Code/brookjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"making-a-todo-list\"\n    }}>{`Making a Todo List`}</h1>\n    <p>{`Now that we know how to combine together `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` components into bigger components, let's start building our todo list. At this point, we're going to add some application level state, which we'll keep in Redux.`}</p>\n    <h2 {...{\n      \"id\": \"create-addtodo-component\"\n    }}>{`Create `}<inlineCode parentName=\"h2\">{`AddTodo`}</inlineCode>{` Component`}</h2>\n    <p>{`We're going to start with the `}<inlineCode parentName=\"p\">{`AddTodo`}</inlineCode>{` component, which is a modified `}<inlineCode parentName=\"p\">{`Submit`}</inlineCode>{` component. It should look familiar.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// AddTodo.js\nimport { createAction } from 'redux-actions';\nimport { RootJunction, ofType } from 'brookjs';\nimport { changeAction, clickAction, addTodoAction } from '../actions';\nimport Input from './Input';\nimport Button from './Button';\n\nconst defaultState = {\n  value: ''\n};\n\nconst reducer = handleActions(\n  {\n    [changeAction]: (state, action) => ({\n      ...state,\n      value: action.payload.value\n    }),\n    [clickAction]: state => ({\n      ...state,\n      // Clear value on submission\n      value: ''\n    })\n  },\n  defaultState\n);\n\nconst AddTodo = () => {\n  const { root$, state } = useDelta(reducer, defaultState);\n\n  return (\n    <RootJunction root$={root$}>\n      <div className=\"add-todo\">\n        <Input label=\"Todo: \" name=\"input\" value={state.value} />\n        <Button>Add Todo</Button>\n      </div>\n    </RootJunction>\n  );\n};\n\nconst events = {};\n\nconst combine = all$ => {\n  const change$ = all$.thru(ofType(changeAction));\n  const click$ = all$.thru(ofType(clickAction));\n\n  return change$\n    .filter(action => action.payload.value !== '')\n    .sampledBy(click$)\n    .map(action => addTodoAction(action.payload.value));\n};\n\nexport default toJunction(events, combine)(Submit);\n`}</code></pre>\n    <p>{`The differences here are the label and the emitted action (and obviously the component name).`}</p>\n    <h2 {...{\n      \"id\": \"create-app-component\"\n    }}>{`Create `}<inlineCode parentName=\"h2\">{`App`}</inlineCode>{` Component`}</h2>\n    <p>{`Now that we have a component to add new todos, we need to create the `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{` component. This combines the `}<inlineCode parentName=\"p\">{`AddTodo`}</inlineCode>{` with the list of created todos.`}</p>\n    <p>{`In your application, you'll have two choices at this point: if you want to avoid Redux, `}<inlineCode parentName=\"p\">{`useDelta`}</inlineCode>{` works perfectly well at this point in the application, managing your root state. Alternatively, you can do it in Redux and manage app-level state outside of your UI tree. For demonstration purposes, we're going to wire it up to Redux, which means the App component won't have any state.`}</p>\n    <p>{`Let's see what that looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// components/App.js\nconst App = ({ todos }) => {\n  return (\n    <main>\n      <AddTodo />\n      <ul>\n        {todos.map((todo, i) => (\n          <li key={i}>{todo.name}</li>\n        ))}\n      </ul>\n    </main>\n  );\n};\n`}</code></pre>\n    <p>{`Note that even though this emits events, we don't have to wire anything up here.`}</p>\n    <h2 {...{\n      \"id\": \"wiring-the-app-to-redux\"\n    }}>{`Wiring the `}<inlineCode parentName=\"h2\">{`App`}</inlineCode>{` to Redux`}</h2>\n    <p>{`This entry point is generated by default for you with the CLI, but let's take a look at a simplified version. This is the application entry point, where it connects everything together and starts the application. Not everything we're importing we've seen yet, but we'll look at all of it by the end of this walkthrough.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// index.js\nimport React from 'react';\nimport { createStore } from 'brookjs';\nimport { RootJunction } from 'brookjs-silt';\nimport ReactDOM from 'react-dom';\nimport { init } from './actions';\nimport { App } from './components';\nimport { rootDelta } from './deltas';\nimport { reducer, mapStateToProps } from './state';\n\nconst store = createStore(reducer, initialState, rootDelta);\nconst render = () => {\n  ReactDOM.render(\n    <RootJunction root$={root$ => root$.observe(store.dispatch)}>\n      <App {...mapStateToProps(store.getState())} />\n    </RootJunction>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(render);\nstore.dispatch(init());\n`}</code></pre>\n    <p>{`We use a wrapped version of `}<inlineCode parentName=\"p\">{`createStore`}</inlineCode>{` provided by `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` to create our Redux store. This enables a few things:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A correctly-typed Eddy reducer`}</li>\n      <li parentName=\"ol\">{`A single `}<inlineCode parentName=\"li\">{`rootDelta`}</inlineCode></li>\n      <li parentName=\"ol\">{`Wiring into redux devtools`}</li>\n    </ol>\n    <p>{`We create a render function that is called every time the store changes. Instead of pulling in `}<inlineCode parentName=\"p\">{`react-redux`}</inlineCode>{`, we subscribe to the store directly and map the state to props for the `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{` component. We'll then drill down the props to the child components as needed. This keeps the initial app light and allows you to bring in `}<inlineCode parentName=\"p\">{`react-redux`}</inlineCode>{` when you need.`}</p>\n    <p>{`We then dispatch an `}<inlineCode parentName=\"p\">{`init`}</inlineCode>{` event to kick off the application. This is useful for the `}<inlineCode parentName=\"p\">{`rootDelta`}</inlineCode>{` if you want them to emit events on startup, as they can't emit events synchronously on bootstrapping.`}</p>\n    <h2 {...{\n      \"id\": \"manage-redux-state\"\n    }}>{`Manage Redux State`}</h2>\n    <p>{`Now that we've got the application wired to Redux, we need to write the functions that manage our Redux state. In the above, that's the `}<inlineCode parentName=\"p\">{`state.js`}</inlineCode>{` module, which contains our root selector function as well as our reducer.`}</p>\n    <p>{`Let's take a look.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// state/index.js\nimport { handleActions } from 'redux-actions';\nimport { combineReducers } from 'brookjs';\nimport { addTodoAction } from '../actions';\n\nconst todosReducer = handleActions(\n  {\n    [addTodoAction]: (state, action) => [\n      ...state,\n      { name: action.payload.name, completed: false }\n    ]\n  },\n  []\n);\n\nexport const reducer = combineReducers({\n  todos: todosReducer\n});\n\nexport const mapStateToProps = state => ({\n  todo: state.todos\n});\n`}</code></pre>\n    <p>{`We again create a reducer with `}<inlineCode parentName=\"p\">{`handleActions`}</inlineCode>{` for the `}<inlineCode parentName=\"p\">{`todoReducer`}</inlineCode>{`, and we import `}<inlineCode parentName=\"p\">{`combineReducers`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`brookjs`}</inlineCode>{` instead of Redux. This will provide some extra features we'll learn about later. We also create a `}<inlineCode parentName=\"p\">{`mapStateToProps`}</inlineCode>{`, which plucks off the `}<inlineCode parentName=\"p\">{`todos`}</inlineCode>{` we need for our `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{`. This should all be pretty familiar if you've used Redux before.`}</p>\n    <p><strong parentName=\"p\">{`TODO: Add Codesandbox link.`}</strong></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
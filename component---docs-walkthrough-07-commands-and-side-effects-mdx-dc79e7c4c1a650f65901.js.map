{"version":3,"sources":["webpack:///../docs/walkthrough/07-commands-and-side-effects.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,mOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,0BADR,2BAGA,sBACE,kBAAIC,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,qCACA,kBAAIA,WAAW,MAAf,oCACA,kBAAIA,WAAW,MAAf,sBAA2C,kBAAIA,WAAW,MACtD,kBAAIA,WAAW,MAAf,WAAgC,kBAAIA,WAAW,MAAf,eAAhC,mBACA,kBAAIA,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,+DACA,kBAAIA,WAAW,MAAf,wBAEJ,kBAAIA,WAAW,MAAf,kCAAuD,kBAAIA,WAAW,MAClE,kBAAIA,WAAW,MAAf,yDAEJ,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,wBAEF,qLAAoK,0BAAYA,WAAW,KAAvB,YAApK,QAAiO,0BAAYA,WAAW,KAAvB,UAAjO,2DAA+U,0BAAYA,WAAW,KAAvB,YAA/U,uCACA,qBAAG,0BAAYA,WAAW,KAAvB,gBAAH,2DAAuH,0BAAYA,WAAW,KAAvB,QAAvH,YAAoL,0BAAYA,WAAW,KAAvB,UAApL,kEAAyS,0BAAYA,WAAW,KAAvB,eAAzS,iDAAkZ,0BAAYA,WAAW,KAAvB,QAAlZ,wGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qZAYL,+DAA8C,0BAAYA,WAAW,KAAvB,aAA9C,oKAAwQ,0BAAYA,WAAW,KAAvB,QAAxQ,wIACA,iBAAQ,CACN,GAAM,gCADR,gCAGA,0bAAya,mBAAGA,WAAW,KAAQ,CAC3b,KAAQ,uCAD6Z,mCAAza,2F,0NAOJJ,EAAWK,gBAAiB","file":"component---docs-walkthrough-07-commands-and-side-effects-mdx-dc79e7c4c1a650f65901.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jdigioia/Code/JavaScript/brookjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"commands--side-effects\"\n    }}>{`Commands & Side Effects`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Save todo logic`}</li>\n      <li parentName=\"ul\">{`Add store enhancer to Redux store`}</li>\n      <li parentName=\"ul\">{`Update reducer to return command`}</li>\n      <li parentName=\"ul\">{`Note on testability`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Returns `}<em parentName=\"li\">{`description`}</em>{` of side effect`}</li>\n          <li parentName=\"ul\">{`\"what happened\" vs \"what happens next\"`}</li>\n          <li parentName=\"ul\">{`Logic of how application changes over time remains in store`}</li>\n          <li parentName=\"ul\">{`Still easy to test`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Add delta to respond to command`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Wait 3 seconds and emit failure or success randomly`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Add success checkbox or error message`}</li>\n      <li parentName=\"ul\">{`CodeSandbox example`}</li>\n    </ul>\n    <p>{`To handle custom side effects, create a custom delta. To do so, create a function that takes an options object and returns a function that takes a stream of `}<inlineCode parentName=\"p\">{`actions$`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`state$`}</inlineCode>{`. The returned function should return its own stream of `}<inlineCode parentName=\"p\">{`actions$`}</inlineCode>{` that will be piped into the store.`}</p>\n    <p><inlineCode parentName=\"p\">{`observeDelta`}</inlineCode>{` also comes with a helper function for use with Kefir's `}<inlineCode parentName=\"p\">{`thru`}</inlineCode>{` method. `}<inlineCode parentName=\"p\">{`ofType`}</inlineCode>{` takes a varying number of string constants to compare against `}<inlineCode parentName=\"p\">{`action.type`}</inlineCode>{` and returns a function that can be passed to `}<inlineCode parentName=\"p\">{`thru`}</inlineCode>{`. This function will filter the provided observable by the provided types. See below for an example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Kefir, ofType } from 'brookjs';\nimport { SUBMIT_FORM, formSubmitSuccess, formSubmitFail } from './actions';\n\nexport default function ajaxDelta({ ajax }) {\n    return (actions$, state$) => actions$.thru(ofType(SUBMIT_FORM))\n        .flatMap(action => ajax.post('/api', action.payload))\n        .map(formSubmitted)\n        .flatMapErrors(err => Kefir.constant(formSubmitFail(err)))\n}\n`}</code></pre>\n    <p>{`Providing the ajax service through the `}<inlineCode parentName=\"p\">{`ajaxDelta`}</inlineCode>{` options object keeps the delta pure, making it easier to test that the delta functions as expected without having to mock the XMLHttpRequest object itself. The `}<inlineCode parentName=\"p\">{`ajax`}</inlineCode>{` service itself can then be isolated and tested against the mock object, reducing the amount of work done by each set of unit tests.`}</p>\n    <h2 {...{\n      \"id\": \"note-about-immediate-actions\"\n    }}>{`Note About Immediate Actions`}</h2>\n    <p>{`If you need to emit an action immediately, ensure you're not doing so on the synchronous generation of the delta stream, e.g. route parsing or cookie reading usually handled on application startup. If you do, you may run into odd behavior, as the delta has not yet been fully plugged together and may result in actions either not getting dispatched properly to other deltas or even the store itself. As recommended in `}<a parentName=\"p\" {...{\n        \"href\": \"bootstrapping-the-application.html\"\n      }}>{`\"bootstrapping the application\"`}</a>{`, use an \"INIT\" action of some kind and respond to that to handle these initial reads.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"7AJc":function(e,t,o){"use strict";o.r(t),o.d(t,"_frontmatter",(function(){return r})),o.d(t,"default",(function(){return c}));o("7+lW"),o("aHyW"),o("2Vap"),o("y7Hy"),o("LNPl"),o("owTU");var n=o("V0Ug"),a=o("sN0p");o("xH0s");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/walkthrough/05-commands-deltas-and-side-effects.mdx"}});var d={_frontmatter:r},i=a.a;function c(e){var t=e.components,o=function(e,t){if(null==e)return{};var o,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,["components"]);return Object(n.b)(i,s({},d,o,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"commands-deltas--side-effects"},"Commands, Deltas, & Side Effects"),Object(n.b)("p",null,"Now that we've got todos saved in the store, we need to introduce a mechanism for directing & handling side effects. First, we'll take a look at how we kick off side effects, and then we'll take a look at how we respond to them."),Object(n.b)("h2",{id:"what-is-a-delta"},"What is a Delta?"),Object(n.b)("p",null,"TODO"),Object(n.b)("h2",{id:"directing-side-effects-with-commands"},"Directing Side Effects with Commands"),Object(n.b)("p",null,"Looking back at our reducer, whenever we get a new todo added, we want to save it, so let's update the reducer to do that."),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-js"}),"// state/index.js\n\n// ... snip\nimport { loop } from 'brookjs';\nimport { addTodo, saveTodoRequest } from '../actions';\n\nconst todosReducer = handleActions(\n  {\n    [addTodo]: (state, action) => {\n      const todo = {\n        name: action.payload.name,\n        completed: false\n      };\n      return loop([...state, todo], saveTodoRequest(todo));\n    }\n  },\n  []\n);\n\n// ... snip\n")),Object(n.b)("p",null,"Because we used ",Object(n.b)("inlineCode",{parentName:"p"},"brookjs"),"' ",Object(n.b)("inlineCode",{parentName:"p"},"combineReducers"),", we can use ",Object(n.b)("inlineCode",{parentName:"p"},"loop")," to return commands from our reducers. These commands are dispatched back into the store as well as out to the rest of the application. We can listen to and respond to them with a delta."),Object(n.b)("h2",{id:"handle-commands-with-deltas"},"Handle Commands with Deltas"),Object(n.b)("p",null,"Those commands are dispatched into the entire application, and we can listen to all of the actions dispatched into the store through the delta. Let's take a look at our deltas:"),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-js"}),"// deltas/index.js\nimport { saveTodoRequest, saveTodoSucceeded, saveTodoFailed } from '../actions';\n\nexport const rootDelta = (state$, action$) => {\n  const save$ = action.thru(ofType(saveTodoRequest)).flatMap(action =>\n    ajax$(`/api/todos`, {\n      method: 'POST',\n      body: JSON.stringify(action.payload.todo)\n    })\n      .flatMap(res => res.json())\n      .map(todo => saveTodoSucceeded(todo))\n      .flatMapErrors(err => Kefir.constant(saveTodoFailed(err)))\n  );\n\n  return Kefir.merge([save$]);\n};\n")),Object(n.b)("p",null,"This is a simple delta that maps the API response to a success or failure event, which gets emitted back into the store where the reducer can respond. We could update this delta to retry saving on a regular internal, or a certain number of times, or whatever strategy strategy we want to handle the error."),Object(n.b)("h2",{id:"note-about-immediate-actions"},"Note About Immediate Actions"),Object(n.b)("p",null,"If you need to emit an action immediately, ensure you're not doing so on the synchronous generation of the delta stream, e.g. route parsing or cookie reading usually handled on application startup. If you do, you may run into odd behavior, as the delta has not yet been fully plugged together and may result in actions either not getting dispatched properly to other deltas or even the store itself. Use an ",Object(n.b)("inlineCode",{parentName:"p"},"INIT")," action and respond to that to handle these initial reads."))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/walkthrough/05-commands-deltas-and-side-effects.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-walkthrough-05-commands-deltas-and-side-effects-mdx-2955b893e39164284843.js.map
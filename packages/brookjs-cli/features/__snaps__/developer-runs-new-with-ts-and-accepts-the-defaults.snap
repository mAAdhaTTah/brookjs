// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Developer runs new with ts and accepts the defaults-.beaverrc.ts 1`] = `
"export const dir = 'src';
"
`;

exports[`Developer runs new with ts and accepts the defaults-.storybook/.babelrc 1`] = `
"{
  \\"presets\\": [\\"brookjs\\"]
}
"
`;

exports[`Developer runs new with ts and accepts the defaults-.storybook/main.js 1`] = `
"module.exports = {
  stories: ['../src/**/__stories__/*.stories.tsx'],
  addons: [
    '@storybook/addon-actions',
    '@storybook/addon-links',
    'brookjs-desalinate/register'
  ],
  webpack: async config => {
    config.module.rules.push({
      test: /\\\\.(ts|tsx)$/,
      loader: require.resolve('babel-loader'),
      options: {
        presets: [['brookjs', { flow: false, typescript: true }]],
      },
    });
    config.resolve.extensions.push('.ts', '.tsx');
    return config;
  }
};
"
`;

exports[`Developer runs new with ts and accepts the defaults-.storybook/main.ts 1`] = `
"module.exports = {
  stories: ['../src/**/__stories__/*.stories.tsx'],
  addons: [
    '@storybook/addon-actions',
    '@storybook/addon-links',
    'brookjs-desalinate/register'
  ]
};
"
`;

exports[`Developer runs new with ts and accepts the defaults-package.json 1`] = `
"{
  \\"name\\": \\"test-app\\",
  \\"version\\": \\"0.0.0\\",
  \\"description\\": \\"A brookjs application\\",
  \\"main\\": \\"src/index.js\\",
  \\"scripts\\": {
    \\"build\\": \\"beaver build\\",
    \\"test\\": \\"npm run test:check && npm run test:lint && npm run test:unit\\",
    \\"test:check\\": \\"beaver test check\\",
    \\"test:lint\\": \\"beaver test lint\\",
    \\"test:unit\\": \\"beaver test unit --coverage\\",
    \\"storybook:start\\": \\"start-storybook -p 6006\\",
    \\"storybook:build\\": \\"build-storybook\\"
  },
  \\"keywords\\": [],
  \\"author\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"devDependencies\\": {
    \\"@storybook/addon-actions\\": \\"^5.0.0\\",
    \\"@storybook/addon-links\\": \\"^5.0.0\\",
    \\"@storybook/addon-storyshots\\": \\"^5.3.6\\",
    \\"@storybook/addons\\": \\"^5.0.0\\",
    \\"@storybook/react\\": \\"^5.0.0\\",
    \\"@testing-library/react\\": \\"^9.0.0\\",
    \\"@testing-library/jest-dom\\": \\"^5.0.0\\",
    \\"brookjs-cli\\": \\"^1.0.0-alpha\\",
    \\"brookjs-desalinate\\": \\"^1.0.0-alpha\\"
  },
  \\"dependencies\\": {
    \\"@babel/polyfill\\": \\"^7.0.0\\",
    \\"brookjs\\": \\"^1.0.0-alpha\\",
    \\"brookjs-silt\\": \\"^1.0.0-alpha\\",
    \\"kefir\\": \\"^3.8.0\\",
    \\"react\\": \\"^16.0.0\\",
    \\"react-dom\\": \\"^16.0.0\\",
    \\"react-redux\\": \\"^7.0.0\\",
    \\"redux\\": \\"^4.0.0\\",
    \\"redux-devtools-extension\\": \\"^2.0.0\\",
    \\"reselect\\": \\"^4.0.0\\",
    \\"typesafe-actions\\": \\"^5.0.0\\",
    \\"typescript\\": \\"^3.7.0\\"
  }
}
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/__tests__/storyshots.spec.ts 1`] = `
"import initStoryshots from '@storybook/addon-storyshots';
import { render } from '@testing-library/react';
import { RootJunction } from 'brookjs-silt';

const reactTestingLibrarySerializer = {
  print: (val, serialize) => serialize(val.container.firstChild),
  test: val => val && val.hasOwnProperty('container')
};

initStoryshots({
  framework: 'react',
  renderer: element =>
    render(element, {
      wrapper: RootJunction
    }),
  snapshotSerializers: [reactTestingLibrarySerializer]
});
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/actions/app.ts 1`] = `
"import { createAction } from 'typesafe-actions';

export const init = createAction('INIT')();

export const incrementClick = createAction('INCREMENT_CLICK')();

export const decrementClick = createAction('DECREMENT_CLICK')();
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/actions/index.ts 1`] = `
"export * from './app';
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/components/__stories__/App.stories.tsx 1`] = `
"import React from 'react';
import App from '../App';

export default {
  title: 'App'
};

export const basic = () => <App count={3} />;
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/components/__tests__/App.spec.tsx 1`] = `
"import React from 'react';
import { fireEvent } from '@testing-library/react';
import { incrementClick, decrementClick } from '../../actions';
import App from '../App';

describe('App', () => {
  it('should emit actions', () => {
    expect(<App count={3} />).toEmitFromJunction(
      [
        [0, KTU.value(incrementClick())],
        [0, KTU.value(decrementClick())]
      ],
      api => {
        fireEvent.click(api.getByText('+'));
        fireEvent.click(api.getByText('-'));
      }
    );
  });
});
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/components/App.tsx 1`] = `
"import React from 'react';
import { toJunction } from 'brookjs-silt';
import { incrementClick, decrementClick } from '../actions';

type Props = {
  count: number;
  onIncrementClick: () => void;
  onDecrementClick: () => void;
};

const App: React.FC<Props> = ({
  count,
  onIncrementClick,
  onDecrementClick
}) => {
  return (
    <div className=\\"test-app\\">
      <h1>
        Welcome to <code>brookjs</code>!<p>Count: {count}</p>
        <div>
          <button onClick={onIncrementClick}>+</button>
          <button onClick={onDecrementClick}>-</button>
        </div>
      </h1>
    </div>
  );
};

const events = {
  onIncrementClick: e$ => e$.map(() => incrementClick()),
  onDecrementClick: e$ => e$.map(() => decrementClick())
};

export default toJunction(events)(App);
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/components/index.ts 1`] = `
"export { default as App } from './App';
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/index.tsx 1`] = `
"import '@babel/polyfill';
import React from 'react';
import { observeDelta, eddy } from 'brookjs';
import { RootJunction } from 'brookjs-silt';
import { applyMiddleware, createStore } from 'redux';
import { connect } from 'react-redux';
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import ReactDOM from 'react-dom';
import { init } from './actions';
import { App } from './components';
import { reducer, mapStateToProps } from './state';

const { __INITIAL_STATE__ = {} } = global;

const compose = composeWithDevTools({
  name: 'test-app'
});

const store = createStore(
  reducer,
  __INITIAL_STATE__,
  compose(applyMiddleware(observeDelta()), eddy())
);

const Root = connect(mapStateToProps)(App);

ReactDOM.render(
  <RootJunction root$={root$ => root$.observe(store.dispatch)}>
    <Root />
  </RootJunction>,
  document.getElementById('app')
);

store.dispatch(init());
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/setupTests.ts 1`] = `
"import 'brookjs-desalinate/extend-expect';
import '@testing-library/jest-dom/extend-expect';
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/state/__tests__/state.spec.ts 1`] = `
"import { reducer, mapStateToProps } from '../index';
import { init, incrementClick, decrementClick } from '../../actions';

describe('state', () => {
  describe('reducer', () => {
    it('should return the initial state on init action', () => {
      expect(reducer({ count: 0 }, init())).toEqual({ count: 0 });
    });

    it('should increase the count on increment click', () => {
      expect(reducer({ count: 0 }, incrementClick())).toEqual({ count: 1 });
    });

    it('should increase the count on decrement click', () => {
      expect(reducer({ count: 0 }, decrementClick())).toEqual({ count: -1 });
    });
  });

  describe('mapStateToProps', () => {
    it('should select the count', () => {
      expect(mapStateToProps({ count: 20 })).toEqual({ count: 20 });
    });
  });
});
"
`;

exports[`Developer runs new with ts and accepts the defaults-src/state/index.ts 1`] = `
"import { createReducer, getType } from 'typesafe-actions';
import { incrementClick, decrementClick } from '../actions';

const initialState = {
  count: 0
};

export const reducer = createReducer(initialState, {
  [getType(incrementClick)]: state => ({ ...state, count: state.count + 1 }),
  [getType(decrementClick)]: state => ({ ...state, count: state.count - 1 })
});

export const mapStateToProps = state => ({
  count: state.count
});
"
`;

exports[`Developer runs new with ts and accepts the defaults-tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"dom\\", \\"dom.iterable\\", \\"esnext\\"],
    \\"allowJs\\": true,
    \\"skipLibCheck\\": true,
    \\"esModuleInterop\\": true,
    \\"allowSyntheticDefaultImports\\": true,
    \\"strict\\": true,
    \\"forceConsistentCasingInFileNames\\": true,
    \\"module\\": \\"esnext\\",
    \\"moduleResolution\\": \\"node\\",
    \\"resolveJsonModule\\": true,
    \\"isolatedModules\\": true,
    \\"noEmit\\": true,
    \\"jsx\\": true
  }
}
"
`;

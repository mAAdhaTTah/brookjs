// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Developer runs new and answers the prompts-.babelrc`] = `
"{
  \\"presets\\": [
    \\"brookjs\\",
    [\\"@babel/env\\", {
         modules: false
    }]
  ]
}
"
`;

exports[`Developer runs new and answers the prompts-.beaverrc.js`] = `
"export const dir = 'client';

/**
 * Mocha testing configuration.
 */
export const mocha = {
    reporter: 'spec',
    ui: 'bdd',
    requires: []
};

/**
 * Webpack build configuration.
 */
export const webpack = {
    entry: {
        app: 'app.js'
    },
    output: {
        path: 'dist/',
        filename: '[name].js'
    },
    modifier: (config, state) => config
};
"
`;

exports[`Developer runs new and answers the prompts-.eslintrc.js`] = `
"module.exports = {
    root: true,
    parserOptions: {
        ecmaVersion: 8,
        sourceType: 'module',
        ecmaFeatures: {
            impliedStrict: true,
            jsx: true,
        },
    },
    plugins: [
        'react',
    ],
    env: {
        es6: true,
        node: true,
        browser: true,
    },
    extends: [
        'valtech'
    ],
    settings: {
        'react': {
            pragma: 'h',
        }
    },
    rules: {
        'react/jsx-uses-react': 2,
        'react/jsx-uses-vars': 2,
    }
};
"
`;

exports[`Developer runs new and answers the prompts-.hygen.js`] = `
"const loader = require('esm');

require = loader(module, { mode: 'auto', cjs: true });

module.exports = {
    helpers: {
        dir: () => require('./.beaver.js').dir
    }
};
"
`;

exports[`Developer runs new and answers the prompts-client/actions/app.js`] = `
"export const INIT = 'INIT';

export const init = () => ({
    type: INIT
});
"
`;

exports[`Developer runs new and answers the prompts-client/actions/index.js`] = `
"export * from './app';
"
`;

exports[`Developer runs new and answers the prompts-client/app.js`] = `
"import '@babel/polyfill';
import { observeDelta, eddy, combineReducers, fromReduxStore } from 'brookjs';
import { h, RootJunction } from 'brookjs-silt';
import { applyMiddleware, createStore } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import ReactDOM from 'react-dom';
import { init } from './actions';
import {} from './deltas';
import {} from './reducers';
import {} from './selectors';

const { __INITIAL_STATE__ } = global;

const compose = composeWithDevTools({
    name: 'test-app'
});

const enhancer = compose(
    applyMiddleware(observeDelta(
        // Register your deltas here
    )),
    eddy()
);

const reducer = combineReducers({
    // Register your reducers here
});

const store = createStore(reducer, __INITIAL_STATE__, enhancer);
const state$ = fromReduxStore(store);

ReactDOM.render(
    <RootJunction silt-embeddable root$={root$ => root$.observe(store.dispatch)}>
        {state$.map(state => (
            <pre><code>{JSON.stringify(state)}</code></pre>
        ))}
    </RootJunction>,
    document.getElementById('app')
);

store.dispatch(init());
"
`;

exports[`Developer runs new and answers the prompts-client/components/index.js`] = `""`;

exports[`Developer runs new and answers the prompts-client/deltas/index.js`] = `""`;

exports[`Developer runs new and answers the prompts-client/dom.js`] = `
"import { children, component, Kefir, render, containerAttribute } from 'brookjs';
import { } from './components';
import template from './view.hbs';

export const el = doc => Kefir.fromCallback(callback => {
    callback(doc.querySelector(\`[\${containerAttribute('app')}]\`));
});

export const view = component({
    children: children({}),
    render: render(template)
});
"
`;

exports[`Developer runs new and answers the prompts-client/reducers/index.js`] = `""`;

exports[`Developer runs new and answers the prompts-client/selectors/index.js`] = `
"export const selectProps = props$ => props$;
"
`;

exports[`Developer runs new and answers the prompts-client/services/index.js`] = `""`;

exports[`Developer runs new and answers the prompts-client/view.hbs`] = `
"<div data-brk-container=\\"app\\">

</div>
"
`;

exports[`Developer runs new and answers the prompts-package.json`] = `
"{
    \\"name\\": \\"test-app\\",
    \\"version\\": \\"1.0.0\\",
    \\"description\\": \\"A test application\\",
    \\"main\\": \\"client/app.js\\",
    \\"scripts\\": {
        \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\"
    },
    \\"keywords\\": [],
    \\"author\\": \\"\\",
    \\"license\\": \\"ISC\\",
    \\"devDependencies\\": {
        \\"@babel/preset-env\\": \\"^7.1.6\\",
        \\"babel-preset-brookjs\\": \\"^1.0.0-alpha.4\\",
        \\"brookjs-cli\\": \\"^1.0.0-alpha.4\\",
        \\"eslint-config-valtech\\": \\"^1.2.0\\",
        \\"eslint-plugin-react\\": \\"^7.11.1\\",
        \\"hygen\\": \\"^1.6.2\\"
    },
    \\"dependencies\\": {
        \\"@babel/polyfill\\": \\"^7.0.0\\",
        \\"brookjs\\": \\"^1.0.0-alpha.4\\",
        \\"brookjs-silt\\": \\"^1.0.0-alpha.4\\",
        \\"prop-types\\": \\"^15.6.2\\",
        \\"react\\": \\"^16.6.3\\",
        \\"react-dom\\": \\"^16.6.3\\",
        \\"redux\\": \\"^4.0.1\\",
        \\"redux-devtools-extension\\": \\"^2.13.5\\"
    }
}
"
`;

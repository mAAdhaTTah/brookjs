// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Developer runs new and answers the prompts-.babelrc 1`] = `
"{
  \\"presets\\": [
    \\"brookjs\\",
    [\\"@babel/env\\", {
         modules: false
    }]
  ],
  \\"plugins\\": [
    \\"@babel/plugin-proposal-class-properties\\"
  ]
}
"
`;

exports[`Developer runs new and answers the prompts-.beaverrc.js 1`] = `
"export const dir = 'client';

/**
 * Webpack build configuration.
 */
export const webpack = {
    entry: {
        app: 'app.js'
    },
    output: {
        path: 'dist/',
        filename: '[name].js'
    },
    modifier: (config, state) => config
};
"
`;

exports[`Developer runs new and answers the prompts-.eslintrc.js 1`] = `
"module.exports = {
    root: true,
    parserOptions: {
        ecmaVersion: 8,
        sourceType: 'module',
        ecmaFeatures: {
            impliedStrict: true,
            jsx: true,
        },
    },
    plugins: [
        'react',
    ],
    env: {
        es6: true,
        node: true,
        browser: true,
    },
    extends: [
        'valtech'
    ],
    settings: {
        'react': {
            pragma: 'h',
        }
    },
    rules: {
        'react/jsx-uses-react': 2,
        'react/jsx-uses-vars': 2,
    }
};
"
`;

exports[`Developer runs new and answers the prompts-.hygen.js 1`] = `
"const loader = require('esm');

require = loader(module, { mode: 'auto', cjs: true });

module.exports = {
    helpers: {
        dir: () => require('./.beaver.js').dir
    }
};
"
`;

exports[`Developer runs new and answers the prompts-.storybook/.babelrc 1`] = `
"{
  \\"presets\\": [
    \\"brookjs\\",
    \\"@babel/env\\"
  ]
}
"
`;

exports[`Developer runs new and answers the prompts-.storybook/addons.js 1`] = `
"import 'brookjs-desalinate/register';
"
`;

exports[`Developer runs new and answers the prompts-.storybook/config.js 1`] = `
"import { configure, addDecorator } from '@storybook/react';
import { withJunction } from 'brookjs-desalinate';

// automatically import all files ending in *.stories.js
const req = require.context('../src', true, /.stories.js$/);
function loadStories() {
  req.keys().forEach(filename => req(filename));
}

addDecorator(withJunction);

configure(loadStories, module);
"
`;

exports[`Developer runs new and answers the prompts-client/actions/app.js 1`] = `
"export const INIT = 'INIT';

export const init = () => ({
    type: INIT
});
"
`;

exports[`Developer runs new and answers the prompts-client/actions/index.js 1`] = `
"export * from './app';
"
`;

exports[`Developer runs new and answers the prompts-client/app.js 1`] = `
"import '@babel/polyfill';
import { observeDelta, eddy, combineReducers, fromReduxStore } from 'brookjs';
import { h, RootJunction } from 'brookjs-silt';
import { applyMiddleware, createStore } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import ReactDOM from 'react-dom';
import { init } from './actions';
import {} from './deltas';
import {} from './reducers';
import {} from './selectors';

const { __INITIAL_STATE__ } = global;

const compose = composeWithDevTools({
    name: 'test-app'
});

const enhancer = compose(
    applyMiddleware(observeDelta(
        // Register your deltas here
    )),
    eddy()
);

const reducer = combineReducers({
    // Register your reducers here
});

const store = createStore(reducer, __INITIAL_STATE__, enhancer);
const state$ = fromReduxStore(store);

ReactDOM.render(
    <RootJunction silt-embeddable root$={root$ => root$.observe(store.dispatch)}>
        {state$.map(state => (
            <pre><code>{JSON.stringify(state)}</code></pre>
        ))}
    </RootJunction>,
    document.getElementById('app')
);

store.dispatch(init());
"
`;

exports[`Developer runs new and answers the prompts-client/components/index.js 1`] = `""`;

exports[`Developer runs new and answers the prompts-client/deltas/index.js 1`] = `""`;

exports[`Developer runs new and answers the prompts-client/dom.js 1`] = `
"import { children, component, Kefir, render, containerAttribute } from 'brookjs';
import { } from './components';
import template from './view.hbs';

export const el = doc => Kefir.fromCallback(callback => {
    callback(doc.querySelector(\`[\${containerAttribute('app')}]\`));
});

export const view = component({
    children: children({}),
    render: render(template)
});
"
`;

exports[`Developer runs new and answers the prompts-client/reducers/index.js 1`] = `""`;

exports[`Developer runs new and answers the prompts-client/selectors/index.js 1`] = `
"export const selectProps = props$ => props$;
"
`;

exports[`Developer runs new and answers the prompts-client/services/index.js 1`] = `""`;

exports[`Developer runs new and answers the prompts-client/view.hbs 1`] = `
"<div data-brk-container=\\"app\\">

</div>
"
`;

exports[`Developer runs new and answers the prompts-package.json 1`] = `
"{
  \\"name\\": \\"test-app\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"A test application\\",
  \\"main\\": \\"client/app.js\\",
  \\"scripts\\": {
    \\"test\\": \\"npm run test:lint && npm run test:unit\\",
    \\"test:lint\\": \\"eslint src --fix\\",
    \\"test:unit\\": \\"beaver test unit --coverage\\",
    \\"storybook\\": \\"start-storybook -p 6006\\"
  },
  \\"keywords\\": [],
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"devDependencies\\": {
    \\"@babel/preset-env\\": \\"^7.0.0\\",
    \\"@babel/plugin-proposal-class-properties\\": \\"^7.0.0\\",
    \\"@storybook/react\\": \\"^4.0.0\\",
    \\"babel-loader\\": \\"^8.0.0\\",
    \\"babel-preset-brookjs\\": \\"^1.0.0-alpha\\",
    \\"brookjs-cli\\": \\"^1.0.0-alpha\\",
    \\"brookjs-desalinate\\": \\"^1.0.0-alpha\\",
    \\"eslint-config-valtech\\": \\"^1.2.0\\",
    \\"eslint-plugin-react\\": \\"^7.11.0\\",
    \\"hygen\\": \\"^1.6.2\\"
  },
  \\"dependencies\\": {
    \\"@babel/polyfill\\": \\"^7.0.0\\",
    \\"brookjs\\": \\"^1.0.0-alpha\\",
    \\"brookjs-silt\\": \\"^1.0.0-alpha\\",
    \\"prop-types\\": \\"^15.6.0\\",
    \\"react\\": \\"^16.3.0\\",
    \\"react-dom\\": \\"^16.3.0\\",
    \\"redux\\": \\"^4.0.0\\",
    \\"redux-actions\\": \\"^2.6.0\\",
    \\"redux-devtools-extension\\": \\"^2.13.0\\",
    \\"reselect\\": \\"^4.0.0\\"
  }
}
"
`;
